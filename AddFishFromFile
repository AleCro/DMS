import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.ArrayList;

/**
 * AddFishFromFile.java
 * Handles importing multiple fish records into the Florida Native Fish Database
 * from a structured text file. This class validates each line for proper format,
 * parses fish attributes, and adds valid entries to the main list.
 */
public class AddFishFromFile{
    private Scanner scanner;
    private List<Fish> fishList;

    public AddFishFromFile(List<Fish> fishList){
        this.scanner=new Scanner(System.in);
        this.fishList=fishList;
    }

    public void addFishFromFile(){
        System.out.println("\nAdd Fish From File");
        while(true){
            System.out.print("Enter file path or name (press ~ to go back, ? to see expected format): ");
            String input=scanner.nextLine();
            if(input.equals("~")){
                System.out.println("Returning to main menu...");
                return;
            }
            if(input.equals("?")){
                showFileFormat();
                continue;
            }
            File file=new File(input);
            if(!file.exists()){
                System.out.println("File not found, please try again.");
                continue;
            }
            try{
                processFile(file);
            }catch(InvalidFileFormatException e){
                System.out.println("File error: "+e.getMessage());
                System.out.println("Please fix the file and try again.");
            }catch(Exception e){
                System.out.println("Unexpected error: "+e.getMessage());
                System.out.println("Please try again.");
            }
            System.out.println("\nYou can add another file, or press ~ to go back to the main menu.");
        }
    }

    private void showFileFormat(){
        System.out.println("\nExpected file format per line:");
        System.out.println("Common Name - Scientific Name - Average Size with unit - Diet - Habitats (comma-separated) - Conservation Status - Tag");
        System.out.println("Example:");
        System.out.println("Bass - Micropterus - 12 in - 3 crabs, algae - Swamp, Pond, River - Least Concern - 000-00-0001\n");
        System.out.println("Rules:");
        System.out.println("- Common Name: letters only");
        System.out.println("- Scientific Name: letters only");
        System.out.println("- Average Size: numeric value followed by a unit (mm, cm, m, in, ft, yd)");
        System.out.println("- Diet: letters only, or optional number and letters, comma-separated (e.g., 'algae' or '3 crabs, 2 shrimp')");
        System.out.println("- Habitats: comma-separated list of names");
        System.out.println("- Conservation Status: one of 'Least Concern', 'Near Threatened', 'Vulnerable', 'Endangered', 'Critically Endangered'");
        System.out.println("- Tag: must follow the format 000-00-0000\n");
    }

    private void processFile(File file) throws InvalidFileFormatException{
        int addedCount=0;
        try(Scanner fileScanner=new Scanner(file)){
            int lineNumber=0;
            while(fileScanner.hasNextLine()){
                lineNumber++;
                String line=fileScanner.nextLine().trim();
                if(line.isEmpty())continue;
                String[] parts=line.split("\\s*-\\s*",7);
                if(parts.length!=7){
                    System.out.println("Line "+lineNumber+" invalid: does not have 7 fields -> "+line);
                    continue;
                }
                String commonName=parts[0].trim();
                String scientificName=parts[1].trim();
                String averageSizeInput=parts[2].trim().toLowerCase();
                String diet=parts[3].trim();
                String habitatsInput=parts[4].trim();
                String status=parts[5].trim();
                String tag=parts[6].trim();
                List<String> errors=new ArrayList<>();
                if(!commonName.matches("[a-zA-Z ]+"))errors.add("Invalid common name: '"+commonName+"'");
                if(!scientificName.matches("[a-zA-Z ]+"))errors.add("Invalid scientific name: '"+scientificName+"'");
                double averageSize=-1;
                String[] sizeParts=averageSizeInput.split("\\s+");
                if(sizeParts.length!=2){
                    errors.add("Average size must include number and unit, e.g., '12 in'");
                }else{
                    String numericPart=sizeParts[0].replaceAll("[^\\d.]","");
                    String unit=sizeParts[1];
                    List<String> allowedUnits=Arrays.asList("mm","cm","m","in","ft","yd");
                    if(!allowedUnits.contains(unit))errors.add("Invalid unit: '"+unit+"' (allowed: mm, cm, m, in, ft, yd)");
                    try{
                        averageSize=Double.parseDouble(numericPart);
                        if(averageSize<=0)errors.add("Average size must be greater than 0");
                    }catch(NumberFormatException e){
                        errors.add("Invalid numeric size: '"+numericPart+"'");
                    }
                }
                String[] dietItems=diet.split("\\s*,\\s*");
                for(String item:dietItems){
                    if(!item.matches("(\\d+\\s)?[a-zA-Z ]+"))errors.add("Invalid diet item: '"+item+"' (e.g., 'algae' or '3 crabs, 2 shrimp')");
                }
                diet=String.join(", ",dietItems);
                if(!tag.matches("\\d{3}-\\d{2}-\\d{4}"))errors.add("Invalid tag: '"+tag+"' (format: 000-00-0000)");
                List<String> habitats=Arrays.asList(habitatsInput.split("\\s*,\\s*"));
                if(habitats.isEmpty())errors.add("Habitats cannot be empty");
                List<String> allowedStatus=Arrays.asList("Least Concern","Near Threatened","Vulnerable","Endangered","Critically Endangered");
                if(!allowedStatus.contains(status))errors.add("Invalid conservation status: '"+status+"'");
                boolean duplicate=fishList.stream().anyMatch(f->f.getTag().equals(tag));
                if(duplicate)System.out.println("Warning: a fish with tag "+tag+" already exists. Adding anyway.");
                if(!errors.isEmpty()){
                    System.out.println("Line "+lineNumber+" has errors:");
                    for(String err:errors)System.out.println(" - "+err);
                    continue;
                }
                Fish fish=new Fish(commonName,scientificName,averageSize,diet,habitats,status,tag);
                fishList.add(fish);
                System.out.println("Fish added successfully: "+commonName+" ("+tag+")");
                addedCount++;
            }
            System.out.println(addedCount+" fish added from file: "+file.getName());
        }catch(FileNotFoundException e){
            throw new InvalidFileFormatException("File not found when reading.");
        }
    }

    private static class InvalidFileFormatException extends Exception{
        public InvalidFileFormatException(String message){super(message);}
    }
}
