import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * RandomFunFact.java
 *
 * Provides random educational facts about Florida fish.
 * Can integrate with the FishManager class to include contextual data.
 * Designed to be fully testable and compatible with unit testing.
 */
public class RandomFunFact{
    /** List of random facts about Florida fish. */
    private static final String[] FUN_FACTS_ARRAY={
            "The Largemouth Bass is Floridaâ€™s official freshwater fish.",
            "Snook can live in both saltwater and freshwater.",
            "Tarpons are known to leap 10 feet out of the water.",
            "Bluegills are part of the Sunfish family.",
            "Redfish develop a distinctive black spot near their tail.",
            "Catfish have taste buds all over their bodies.",
            "Florida gar can breathe air and survive in low-oxygen waters.",
            "Mangrove snappers live near mangrove roots for protection.",
            "Sheepshead have human-like teeth for crushing shells.",
            "Spotted seatrout make a croaking sound to attract mates.",
            "Lionfish are invasive and eat up to 30 smaller fish a day.",
            "The oldest recorded Tarpon lived over 60 years.",
            "Tilapia help keep waterways clean by eating algae.",
            "Snook are protected during spawning season in Florida.",
            "The Sailfish is the fastest fish in the ocean, reaching 68 mph.",
            "Mullet fish can leap out of water to escape predators.",
            "Grouper can change sex from female to male as they mature.",
            "The Goliath Grouper can weigh over 800 pounds.",
            "Anglers in Florida require a license for most fish species.",
            "Healthy mangroves are essential for fish nursery habitats."
    };

    /** Maintains shuffled list of facts to avoid repetition. */
    private static List<String> shuffledFacts=new ArrayList<>();

    /** Index of the current fact being returned. */
    private static int currentIndex=0;

    /** Optional link to FishManager for contextual statistics. */
    private static FishManager manager;

    /**
     * Initializes the RandomFunFact class with an optional FishManager reference.
     * If no manager is provided, the class still functions normally.
     *
     * @param fishManager an instance of FishManager or null
     */
    public static void initialize(FishManager fishManager){
        manager=fishManager;
        reshuffleFacts();
    }

    /**
     * Randomly shuffles the facts and resets the index.
     * Called automatically when all facts have been displayed once.
     */
    private static void reshuffleFacts(){
        shuffledFacts=new ArrayList<>(List.of(FUN_FACTS_ARRAY));
        Collections.shuffle(shuffledFacts);
        currentIndex=0;
    }

    /**
     * Returns a random fun fact. Once all facts have been shown, they are reshuffled.
     * Occasionally includes context from FishManager, if available.
     *
     * @return a random fun fact string
     */
    public static String getRandomFact(){
        // If list is empty or all facts have been used, reshuffle
        if(shuffledFacts.isEmpty()||currentIndex>=shuffledFacts.size()){
            reshuffleFacts();
        }

        // Retrieve the next fact in the shuffled order
        String fact=shuffledFacts.get(currentIndex++);

        // Add contextual information from FishManager about average habitats
        if(manager!=null&&Math.random()<0.2){
            double avgHabitats=manager.calculateAverageHabitatsPerFish();
            fact+=String.format(" (On average, %.1f habitats per fish in your database.)",avgHabitats);
        }
        return fact;
    }

    /**
     * Returns the total number of stored facts.
     *
     * @return the number of available fun facts
     */
    public static int getTotalFactCount(){
        return FUN_FACTS_ARRAY.length;
    }

    /**
     * Returns the current index of the next fact in sequence.
     *
     * @return the index position of the current fact
     */
    public static int getCurrentIndex(){
        return currentIndex;
    }

    /**
     * Clears internal state for testing.
     * The next call to getRandomFact() will trigger a reshuffle.
     */
    public static void resetForTesting(){
        shuffledFacts.clear();
        currentIndex=0;
    }
}
