/**
 * FishManagerTest.java
 *
 * Unit tests for the FishManager class.
 *
 * Purpose:
 * - Validate core analytical features (average, diversity).
 * - Verify CRUD-like behaviors (add, find, update, remove).
 * - Ensure data integrity when updating or deleting fish.
 * - Confirm duplicate tag detection works properly.
 */

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;

public class FishManagerTest {
    private FishManager manager;
    private List<Fish> fishList;

    @BeforeEach
    void setUp() {
        fishList = new ArrayList<>();
        fishList.add(new Fish("Bass", "Micropterus", 12.0, "insects algae", List.of("Lake", "River"), "Least Concern", "001-00-0001"));
        fishList.add(new Fish("Snook", "Centropomus", 20.0, "shrimp small fish", List.of("Estuary", "Mangrove"), "Near Threatened", "002-00-0002"));
        fishList.add(new Fish("Bluegill", "Lepomis", 10.0, "insects", List.of("Lake"), "Least Concern", "003-00-0003"));
        manager = new FishManager(fishList);
    }

    // ---- Analytical Tests ----
    @Test
    void testCalculateAverageHabitatsPerFish() {
        double avgHabitats = manager.calculateAverageHabitatsPerFish();
        assertEquals(1.67, avgHabitats, 0.01, "Average habitats per fish should be correct");
    }

    @Test
    void testCalculateAverageSize() {
        double avgSize = manager.calculateAverageSize();
        assertEquals(14.0, avgSize, 0.001, "Average size should be correct");
    }

    @Test
    void testGetTopDiversityFish() {
        String top = manager.getTopDiversityFish();
        assertTrue(top.contains("Snook"), "Snook should have the top diversity score");
        assertTrue(top.contains("score: 6"), "Score calculation should match expected");
    }

    // ---- Add & Find ----
    @Test
    void testAddFish() {
        Fish newFish = new Fish("Trout", "Oncorhynchus", 18.0, "insects larvae", List.of("River", "Lake"), "Vulnerable", "004-00-0004");
        boolean added = manager.addFish(newFish);
        assertTrue(added, "Fish should be successfully added");
        assertEquals(4, manager.getFishList().size(), "List size should increase by 1");
    }

    @Test
    void testFindFishByTagFound() {
        Fish found = manager.findFishByTag("002-00-0002");
        assertNotNull(found, "Fish should be found by tag");
        assertEquals("Snook", found.getCommonName());
    }

    @Test
    void testFindFishByTagNotFound() {
        Fish found = manager.findFishByTag("999-99-9999");
        assertNull(found, "Nonexistent tag should return null");
    }

    // ---- Update Tests ----
    @Test
    void testUpdateFishByTag_ValidChanges() {
        boolean updated = manager.updateFishByTag(
                "001-00-0001",
                "Largemouth Bass",
                "Micropterus salmoides",
                15.5,
                "worms crustaceans",
                List.of("Lake", "Swamp"),
                "Vulnerable",
                "001-00-0011"
        );
        assertTrue(updated, "Fish should be updated successfully");

        Fish updatedFish = manager.findFishByTag("001-00-0011");
        assertNotNull(updatedFish, "Updated tag should exist");
        assertEquals("Largemouth Bass", updatedFish.getCommonName());
        assertEquals("Micropterus salmoides", updatedFish.getScientificName());
        assertEquals(15.5, updatedFish.getAverageSize());
        assertEquals("Vulnerable", updatedFish.getConservationStatus());
        assertTrue(updatedFish.getHabitats().contains("Swamp"));
    }

    @Test
    void testUpdateFishByTag_InvalidDataIgnored() {
        boolean updated = manager.updateFishByTag(
                "002-00-0002",
                "Snook123",   // Invalid (contains digits)
                null,
                -10.0,        // Invalid (negative size)
                "",           // Invalid (empty diet)
                null,
                "",
                "badtag"      // Invalid format
        );
        assertTrue(updated, "Update should still return true (found fish)");
        Fish snook = manager.findFishByTag("002-00-0002");
        assertEquals("Snook", snook.getCommonName(), "Invalid name should be ignored");
        assertEquals(20.0, snook.getAverageSize(), "Negative size should be ignored");
        assertEquals("shrimp small fish", snook.getDiet(), "Empty diet should be ignored");
    }

    @Test
    void testUpdateFishByTag_NotFound() {
        boolean updated = manager.updateFishByTag("999-99-9999", "FakeFish", null, 5.0, null, null, null, null);
        assertFalse(updated, "Update should fail for non-existent tag");
    }

    // ---- Remove Tests ----
    @Test
    void testRemoveFishByTag() {
        boolean removed = manager.removeFishByTag("003-00-0003");
        assertTrue(removed, "Fish should be removed");
        assertEquals(2, manager.getFishList().size(), "List size should decrease");
        assertNull(manager.findFishByTag("003-00-0003"), "Removed fish should no longer be found");
    }

    @Test
    void testRemoveFishByTag_NotFound() {
        boolean removed = manager.removeFishByTag("999-99-9999");
        assertFalse(removed, "No fish should be removed for invalid tag");
    }

    // ---- Duplicate Tag Detection ----
    @Test
    void testGetDuplicateTags() {
        fishList.add(new Fish("CopyBass", "Micropterus", 15.0, "insects", List.of("River"), "Least Concern", "001-00-0001"));
        Map<String, Integer> duplicates = manager.getDuplicateTags();
        assertTrue(duplicates.containsKey("001-00-0001"), "Duplicate tag should be detected");
        assertEquals(2, duplicates.get("001-00-0001"));
    }

    @Test
    void testGetDuplicateTagsNone() {
        Map<String, Integer> duplicates = manager.getDuplicateTags();
        assertTrue(duplicates.isEmpty(), "No duplicates should be found");
    }

    // ---- Analytical Edge Cases ----
    @Test
    void testCalculateAverageWithEmptyList() {
        FishManager empty = new FishManager(new ArrayList<>());
        assertEquals(0.0, empty.calculateAverageHabitatsPerFish(), "Empty list should return 0 for habitats");
        assertEquals(0.0, empty.calculateAverageSize(), "Empty list should return 0 for size");
        assertEquals("No fish data available.", empty.getTopDiversityFish());
    }
}
