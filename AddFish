import java.util.*;

/**
 * AddFish.java
 * Provides functionality to add new fish records into the database.
 * Handles both user input and validation, supporting dependency injection
 * for testing purposes. The class collects details such as name, size,
 * diet, habitats, and conservation status, and ensures valid data entry.
 */
public class AddFish{
    private final Scanner scanner;
    private final List<Fish> fishList;

    public AddFish(List<Fish> fishList){
        this(new Scanner(System.in),fishList);
    }

    public AddFish(Scanner scanner,List<Fish> fishList){
        this.scanner=scanner;
        this.fishList=fishList;
    }

    public void addFish(){
        Fish fish=promptFishDetails();
        if(fish!=null){
            fishList.add(fish);
            System.out.println("Fish added successfully.");
        }
    }

    public Fish promptFishDetails(){
        String commonName=readValidInput("Enter Fish Common Name (letters only) (press ~ to go back, ? for format info): ",
                s->s.matches("[a-zA-Z ]+"),"Invalid input. Letters only.");
        if(commonName.equals("~"))return null;

        String scientificName=readValidInput("Enter Scientific Name (letters only): ",
                s->s.matches("[a-zA-Z ]+"),"Invalid input. Letters only.");

        double averageSize=0.0;
        List<String> validUnits=List.of("mm","cm","m","in","ft","yd");
        while(true){
            System.out.print("Enter Average Size with unit (e.g., 12 in, 30 cm, 0.5 m): ");
            String input=scanner.nextLine().trim().toLowerCase();
            String[] parts=input.split("\\s+");
            if(parts.length==2&&validUnits.contains(parts[1])){
                try{
                    averageSize=Double.parseDouble(parts[0]);
                    if(averageSize>0)break;
                    System.out.println("Size must be greater than 0.");
                }catch(NumberFormatException e){
                    System.out.println("Invalid numeric value.");
                }
            }else{
                System.out.println("Invalid format. Must include number and valid unit (mm, cm, m, in, ft, yd).");
            }
        }

        String diet=readValidInput("Enter Diet (letters only, optional leading number, comma-separated): ",
                s->Arrays.stream(s.split("\\s*,\\s*")).allMatch(i->i.matches("(\\d+\\s)?[a-zA-Z ]+")),
                "Invalid diet input. Example: 'algae' or '3 crabs, 2 shrimp'.");

        List<String> habitatOptions=List.of("River","Lake","Swamp","Mangrove","Estuary","Reef","Spring","Other");
        List<String> habitats=new ArrayList<>();
        while(habitats.isEmpty()){
            System.out.println("\nSelect habitats (comma-separated numbers 1–8):");
            for(int i=0;i<habitatOptions.size();i++){
                System.out.println((i+1)+". "+habitatOptions.get(i));
            }
            System.out.print("Enter your choice(s): ");
            String[] choices=scanner.nextLine().trim().split("\\s*,\\s*");
            for(String c:choices){
                try{
                    int idx=Integer.parseInt(c);
                    if(idx>=1&&idx<=8){
                        if(idx==8){
                            System.out.print("Enter custom habitat name: ");
                            String custom=scanner.nextLine().trim();
                            if(!custom.isEmpty())habitats.add(custom);
                        }else{
                            habitats.add(habitatOptions.get(idx-1));
                        }
                    }
                }catch(NumberFormatException ignored){}
            }
            if(habitats.isEmpty())System.out.println("Invalid selection. Please choose numbers between 1 and 8.");
        }

        String[] statuses={"Least Concern","Near Threatened","Vulnerable","Endangered","Critically Endangered"};
        String status="";
        while(status.isEmpty()){
            System.out.println("\nSelect Conservation Status:");
            for(int i=0;i<statuses.length;i++){
                System.out.println((i+1)+". "+statuses[i]);
            }
            System.out.print("Enter choice (1–5): ");
            try{
                int c=Integer.parseInt(scanner.nextLine());
                if(c>=1&&c<=5)status=statuses[c-1];
                else System.out.println("Invalid choice. Choose 1–5.");
            }catch(NumberFormatException e){
                System.out.println("Invalid input. Enter a number 1–5.");
            }
        }

        String tag=readValidInput("Enter fish tag (000-00-0000): ",
                s->s.matches("\\d{3}-\\d{2}-\\d{4}"),"Invalid tag format. Example: 001-00-0001");

        if(fishList.stream().anyMatch(f->f.getTag().equals(tag))){
            System.out.println("Warning: a fish with this tag already exists. Adding anyway.");
        }

        return new Fish(commonName,scientificName,averageSize,diet,habitats,status,tag);
    }

    private String readValidInput(String prompt,java.util.function.Predicate<String> validator,String errorMsg){
        while(true){
            System.out.print(prompt);
            String input=scanner.nextLine().trim();
            if(input.equals("~"))return "~";
            if(input.equals("?")){
                showFormat();
                continue;
            }
            if(validator.test(input))return input;
            System.out.println(errorMsg);
        }
    }

    private void showFormat(){
        System.out.println("""
                Expected Input Format for Adding a Fish
                ----------------------------------------------------
                Common Name:
                - Letters and spaces only.
                - Example: "Largemouth Bass"
                Scientific Name:
                - Letters and spaces only.
                - Example: "Micropterus salmoides"
                Average Size:
                - Numeric value followed by a unit of measurement.
                - Allowed units: mm, cm, m, in, ft, yd
                - Example: "30 cm", "12 in", "0.5 m"
                Diet:
                - Comma-separated list of foods.
                - Optional quantity before item.
                - Example: "algae", "3 crabs, 2 shrimp"
                Habitats:
                - Choose from numbers 1–8.
                - River, Lake, Swamp, Mangrove, Estuary, Reef, Spring, Other
                Conservation Status:
                - Select 1–5:
                    1. Least Concern
                    2. Near Threatened
                    3. Vulnerable
                    4. Endangered
                    5. Critically Endangered
                Tag:
                - Unique identifier in format 000-00-0000
                - Example: 001-00-0001
                ----------------------------------------------------
                """);
    }
}
